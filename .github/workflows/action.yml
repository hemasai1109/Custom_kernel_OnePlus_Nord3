name: Build
permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions

on:
  workflow_dispatch: 
    inputs:
      model:
        required: true
        type: string
        default: CPH2491
      soc:
        required: true
        type: string
        default: mt6983
      branch:
        required: true
        type: string
        default: main
      manifest:
        required: true
        type: string
        default: manifest_stock.xml
      android_version:
        required: true
        type: string
        default: android12
      kernel_version:
        required: true
        type: string
        default: 5.10
      ksun_branch:
        required: true
        type: string
        default: next
      susfs_branch:
        required: true
        type: string
        default: gki-android12-5.10
jobs:
  build-kernel-oneplus-kernelsu-susfs:
    runs-on: ubuntu-latest
    steps:
          - name: Setup Build System
            shell: bash
            run: |
              export DEBIAN_FRONTEND=noninteractive
              echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
              
              df -h
              
              sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
              sudo docker image prune --all --force
              echo "some directories deleted"
              
              # Remove large unwanted packages
              sudo apt-get purge -y \
                aria2 ansible azure-cli shellcheck rpm xorriso zsync \
                esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
                google-cloud-sdk imagemagick \
                libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
                mercurial apt-transport-https mono-complete libmysqlclient \
                unixodbc-dev yarn chrpath libssl-dev libxft-dev \
                libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
                snmp pollinate libpq-dev postgresql-client powershell ruby-full \
                sphinxsearch subversion mongodb-org microsoft-edge-stable || true
              
              # Regex-based purges (for bulk families like mysql, php, dotnet)
              sudo apt-get purge -y $(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet') || true
              
              # Clean up
              sudo apt-get autoremove -y
              sudo apt-get autoclean -y
              echo "some packages purged"
              
              df -h
              
              # Install dependencies
              echo "Installing Repo and Python"
              sudo apt update
              sudo apt install -y python3 python-is-python3
              
              mkdir -p ./git-repo
              curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
              chmod a+rx ./git-repo/repo
              echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV
              
              # Set CONFIG Environment Variable
              echo "CONFIG=${{ inputs.model }}" >> $GITHUB_ENV
    
          - name: Clone AnyKernel3 and Other Dependencies
            shell: bash
            run: |
              echo "Cloning AnyKernel3 and other dependencies..."
              
              ANYKERNEL_BRANCH="gki-2.0"
              if [[ -z "${{ inputs.susfs_branch }}" ]]; then
                SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
              else
                SUSFS_BRANCH="${{ inputs.susfs_branch }}"
              fi
              
              # Debug print the branches
              echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
              echo "Using branch for SUSFS: $SUSFS_BRANCH"
              
              # Clone repositories using the branch names
              git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
              git clone https://github.com/TheWildJames/kernel_patches.git
              
              # Clone the repo with all branches and history (can optimize later if needed)
              git clone https://gitlab.com/simonpunk/susfs4ksu.git
              cd susfs4ksu || exit 1
              
              # Try to check if TARGET_REF is a valid branch or tag
              if git rev-parse --verify "origin/$SUSFS_BRANCH" >/dev/null 2>&1 || git rev-parse --verify "$SUSFS_BRANCH" >/dev/null 2>&1 ; then
                # It's a branch or commit hash
                git checkout "$SUSFS_BRANCH"
              else
                echo "Error: '$TARGET_REF' is neither a valid branch/tag nor a valid commit hash."
                exit 1
              fi
    
          - name: Initialize and Sync Kernel Source
            shell: bash
            run: |
              echo "Creating folder for configuration: $CONFIG..."
              mkdir -p "$CONFIG"
              cd "$CONFIG"
              
              # Initialize and sync kernel source
              echo "Initializing and syncing kernel source..."
              $REPO init -u https://github.com/hemasai1109/Custom_kernel_OnePlus_Nord3.git -b ${{ inputs.branch }} -m ${{ inputs.manifest }} --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
              
              # Sync repo and apply patches
              $REPO --version
              $REPO --trace sync -c --no-clone-bundle --no-tags --optimized-fetch -j$(nproc --all) --fail-fast
          
          - name: Add KernelSU Next
            shell: bash
            run: |
              echo "Changing to configuration directory: $CONFIG..."
              cd "$CONFIG/kernel-5.10"
              
              echo "Adding KernelSU Next..."
              
              if [ "${{ inputs.ksun_branch }}" == "stable" ]; then
                curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -
              else
                curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}
              fi
              
              git submodule update --init --recursive
    
          - name: Apply SUSFS Patches
            shell: bash
            run: |
              echo "Changing to configuration directory: $CONFIG..."
              cd "$CONFIG/kernel-5.10"
              
              echo "Applying SUSFS patches..."
              
              # Copy SUSFS patches
              cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./
              cp ../../susfs4ksu/kernel_patches/fs/* ./fs/
              cp ../../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
              
              cd ./KernelSU-Next
              
              echo "Applying next SUSFS patches..."
              susfs_version=$(grep '#define SUSFS_VERSION' ../include/linux/susfs.h | awk -F'"' '{print $2}')
              echo "SUSVER=$susfs_version" >> $GITHUB_ENV
              BASE_VERSION=10200
              cd ./kernel
              KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" $BASE_VERSION)
              sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" Makefile
              cd ..
              echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
              echo "KernelSU Next Version: $KSU_VERSION"
              echo "SusFS Version: $susfs_version"
              
              case "$susfs_version" in
                "v1.5.5"|"v1.5.6"|"v1.5.7")
                  cp "../../../kernel_patches/next/0001-kernel-implement-susfs-v1.5.5-v1.5.7-KSUN-v1.0.8.patch" "./ksun_susfs_latest.patch"
                  ;;
                "v1.5.8")
                  cp ../../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
                  patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch  || true
                  cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_apk_sign.c.patch" ./
                  patch -p1 --forward --fuzz=3 < fix_apk_sign.c.patch
                  cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_core_hook.c.patch" ./
                  patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch
                  cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_selinux.c.patch" ./
                  patch -p1 --forward --fuzz=3 < fix_selinux.c.patch
                  cp "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_ksud.c.patch" ./
                  patch -p1 --forward --fuzz=3 < fix_ksud.c.patch
                  ;;
                "v1.5.9")
                  cp ../../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
                  patch -p1 --forward < 10_enable_susfs_for_ksu.patch  || true
                  
                  for file in $(find ./kernel -maxdepth 2 -name "*.rej" -printf "%f\n" | cut -d'.' -f1); do
                      echo "Patching file: $file.c with fix_$file.c.patch"
                      patch -p1 --forward < "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_$file.c.patch"
                  done
                  
                  # Fix build errors (no rejects; Still giving errors)
                  patch -p1 --forward < "../../../kernel_patches/next/susfs_fix_patches/$susfs_version/fix_kernel_compat.c.patch"
                  ;;
                *)
                  echo "Invalid version: $susfs_version"
                  exit 1
                  ;;
              esac
              patch -p1 --forward < ksun_susfs_latest.patch || true
              
              
              # Change to common directory and apply SUSFS patch
              cd ..
              
              if [ "${{ inputs.android_version }}" = "android15" ] && [ "${{ inputs.kernel_version }}" = "6.6" ]; then
                  if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c; then
                      sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c
                  else
                      echo "Line already present. Skipping insert."
                  fi
              fi
              patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true
              
              KERNEL_VERSION="${{ inputs.kernel_version }}"
              MIN_VERSION="5.16"
              
              if [ "$(printf '%s\n' "$KERNEL_VERSION" "$MIN_VERSION" | sort -V | head -n1)" = "$KERNEL_VERSION" ]; then
                echo "Patching ptrace!"
                patch -p1 -F 3 < "../../kernel_patches/gki_ptrace.patch"
              else
                echo "Kernel >= $MIN_VERSION, skipping ptrace patch"
              fi
              
              
    
          - name: Apply KSUN Hooks
            shell: bash
            run: |
              echo "Changing to configuration directory: $CONFIG..."
              cd "$CONFIG/kernel-5.10"
              echo "Applying KSUN Hooks..."
              cp ../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./manual_hooks.patch
              patch -p1 < ./manual_hooks.patch
              
          - name: Apply Hide Stuff Patches
            shell: bash
            run: |
              echo "Changing to configuration directory: $CONFIG..."
              cd "$CONFIG/kernel-5.10"
              # Apply additional patch
              cp ../../kernel_patches/69_hide_stuff.patch ./
              patch -p1 -F 3 < 69_hide_stuff.patch
    
          - name: Add KernelSU-Next and SUSFS Configuration Settings
            shell: bash
            run: |
              echo "Changing to configuration directory: $CONFIG..."
              cd "$CONFIG/kernel-5.10"
              
              echo "Adding configuration settings to gki_defconfig..."
              
              # Add KSU configuration settings
              echo "CONFIG_KSU=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./arch/arm64/configs/gki_defconfig
              
              # Add SUSFS configuration settings
              echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/arm64/configs/gki_defconfig
              
              # Add additional tmpfs config setting
              echo "CONFIG_TMPFS_XATTR=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./arch/arm64/configs/gki_defconfig
    
          - name: Add BBR Support
            shell: bash
            run: |
              echo "Changing to configuration directory: $CONFIG..."
              cd "$CONFIG/kernel-5.10"
              
              echo "Adding configuration settings to gki_defconfig..."
              echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_TCP_CONG_BBR=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_TCP_CONG_BIC=n" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_TCP_CONG_HTCP=n" >> ./arch/arm64/configs/gki_defconfig
              
              echo "CONFIG_NET_SCH_FQ=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_NET_SCH_FQ_CODEL=y" >> ./arch/arm64/configs/gki_defconfig
    
          - name: Add TTL Target Support
            shell: bash
            run: |
              echo "Changing to configuration directory: $CONFIG..."
              cd "$CONFIG/kernel-5.10"
              
              echo "Adding configuration settings to gki_defconfig..."
              echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./arch/arm64/configs/gki_defconfig
              echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./arch/arm64/configs/gki_defconfig
    
          - name: Run sed and perl Commands
            shell: bash
            run: |
              echo "Changing to configuration directory: $CONFIG..."
              cd "$CONFIG/kernel-5.10"
              
              echo "Running sed commands..."
              
              sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' "./arch/arm64/configs/gki_defconfig"
              sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "./arch/arm64/configs/gki_defconfig"
              sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "./arch/arm64/configs/gki_defconfig"
              
              # Run sed commands for modifications
              sed -i 's/check_defconfig//' ./build.config.gki
             
              # For New setlocalversion Script
              sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "${KERNELVERSION}-${{ inputs.android_version }}-OP-Wild"/' ./scripts/setlocalversion
              # sed -i 's/echo "${KERNELVERSION}${file_localversion}${config_localversion}${LOCALVERSION}${scm_version}"/echo "${KERNELVERSION}-${{ inputs.android_version }}-OP-Wild"/' ./external/dtc/scripts/setlocalversion
              chmod +x ./scripts/setlocalversion
              # chmod +x ./external/dtc/scripts/setlocalversion
              sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl || echo "No stamp.bzl!"
              sed -i 's/-dirty//' ./scripts/setlocalversion
              # sed -i 's/-dirty//' ./external/dtc/scripts/setlocalversion
              sed -i 's/-dirty//' ./build/kernel/kleaf/workspace_status_stamp.py || echo "No workspace_status_stamp.py!"
              
              sed -i '/echo "LTO $LTO "/i export LTO=thin' ./oplus/build/oplus_setup.sh
              sed -i 's/export REPACK_IMG=true/export REPACK_IMG=false/g' ./oplus/build/oplus_setup.sh
             
              # Run perl command to modify UTS_VERSION
              DATESTR=$(date -u)
              perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT $DATESTR"}' ./scripts/mkcompile_h
    
          - name: Build the Kernel
            shell: bash
            run: |
              echo "Changing to configuration directory: $CONFIG..."
              cd "$CONFIG"
              
              echo "Building the kernel..."
              # Clear Cache
              sudo sh -c 'sync; echo 3 > /proc/sys/vm/drop_caches'
              
              rm ./kernel-5.10/android/abi_gki_protected_exports_* || echo "No protected exports!"
              
              BUILD_TYPE="gki"
              BAZEL_ARGS=(--jobs=$(nproc --all) --lto=thin)
              if [ "${{ inputs.soc }}" == "sun" ]; then
                BUILD_TYPE="perf"
                BAZEL_ARGS+=(-g)
              fi
              
              (stdbuf -oL bash -c '
                while true; do
                  echo "=== $(date) ==="
                  free -h
                  echo "======"
                  df -h
                  echo "======"
                  top -b -n 1 | head -n 15
                  echo ""
                  sleep 60
                done
              ') &
              MONITOR_PID=$!
              trap "kill $MONITOR_PID" EXIT
              
              if [ -f ./kernel-5.10/build_with_bazel.py ]; then
                ./kernel-5.10/oplus/bazel/oplus_modules_variant.sh ${{ inputs.soc }} "$BUILD_TYPE" ""
                ./kernel-5.10/build_with_bazel.py -t ${{ inputs.soc }} $BUILD_TYPE "${BAZEL_ARGS[@]}" -o "$(pwd)/out"
              else
                LTO=thin ./kernel-5.10/oplus/build/oplus_build_kernel.sh ${{ inputs.soc }} "$BUILD_TYPE"
              fi
    
          - name: Create ZIP Files for Different Formats
            shell: bash
            run: |
              echo "Changing to configuration directory: $CONFIG..."
              cd "$CONFIG"
              
              echo "Copying Image"
              cp ./out/dist/Image ../AnyKernel3/Image
              
              echo "Navigating to AnyKernel3 directory..."
              cd ../AnyKernel3
              
               if [ "${{ inputs.model }}" == "OPAce5Pro" ] || [ "${{ inputs.model }}" == "OP13" ]; then
                cp ../kernel_patches/oneplus/hmbird/bins/* ./tools/
                patch -F 3 < ../kernel_patches/oneplus/hmbird/ak3_hmbird_patch.patch
              fi
              
              # Zip the files in the AnyKernel3 directory with a new naming convention
              ZIP_NAME="AnyKernel3_${{ inputs.model }}_${{ inputs.android_version }}-${{ inputs.kernel_version }}_Next_${{ env.KSUVER }}_SUSFS_${{ env.SUSVER }}.zip"
              echo "Creating zip file $ZIP_NAME..."
              zip -r "../$ZIP_NAME" ./*
    
          - name: Upload Build Artifacts
            uses: actions/upload-artifact@v4
            with:
              name: kernel-${{ env.CONFIG }}
              path: |
                *.zip
